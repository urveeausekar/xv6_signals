signal mask:
	The signal mask is represented by a 32 bit quantity where bit y stands for the signal numbered y. Bit 0 i.e 
	the LSB is unused. If bit y is 1, then signal number y is masked, otherwise not masked.

uint sigsetmask(uint mask);
	-To mask signal y , user should first get the current mask using siggetmask, and then set the yth bit of the mask
	 to 1. Here LSB is considered as bit 0 on the right side. This can be done by logical ORint the current mask with
	 the current mask with a 32 bit quantity with all bits except the yth bit 0.
	-Then the result of the logical OR should be given as argument to sigsetmask.
	-The return value is the new mask.


uint siggetmask();
	-Returns the current signal mask.
	
	
int Kill(pid_t pid, int sig):
	-sends signal sig to process with id pid.
	-User process is not permitted to signal a kernel process. Kill ignores the attempt and returns 0.
	-If anyone tries to signal init, Kill ignores the attempt and returns 0.
	-If pid is 0 or a negative number other than -1, Kill returns without doing anything, because xv6 doesn't have
	 process groups.
	-If signal is 0, no changes in proc of signalled of process, ie no signalling is actually done.
	-If pid is -1, then every process that the sender is allowed to signal, is signalled.
	
